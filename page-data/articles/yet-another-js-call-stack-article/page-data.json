{
    "componentChunkName": "component---src-templates-article-index-js",
    "path": "/articles/yet-another-js-call-stack-article",
    "result": {"pageContext":{"article":{"frontmatter":{"created":"2022-02-14T03:19:31.931Z","title":"Yet another JS call stack article","updated":"2022-02-14T02:10:34.407Z"},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Yet another JS call stack article"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Prerequisites"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Better articles from better authors better explain Call Stacks and the JS interpreter:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Call_stack"},"children":[{"type":"text","value":"MDN"}]},{"type":"text","value":" glossary entry"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://mathiasbynens.be/notes/async-stack-traces"},"children":[{"type":"text","value":"Mathias explains JS "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async"}]},{"type":"text","value":" and vanilla promises can be optimized differently by the engine."}]},{"type":"text","value":" (I'm guilty. I've wrongly claimed "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await"}]},{"type":"text","value":" was nothing more than sugar!)"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An important excerpt from the above article:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The fundamental difference between await and vanilla promises is that await X() suspends execution of the current function, while promise.then(X) continues execution of the current function after adding the X call to the callback chain."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we're Call Stack experts, I'll skip to Rust and WASM. From "},{"type":"element","tagName":"a","properties":{"href":"https://rustwasm.github.io/wasm-bindgen/reference/js-promises-and-rust-futures.html#working-with-a-js-promise-and-a-rust-future"},"children":[{"type":"text","value":"the docs"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"converting a Promise to Rust creates a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"impl Future<Output = Result<JsValue, JsValue>>"}]},{"type":"text","value":". This corresponds to "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catch"}]},{"type":"text","value":" in JS where a successful promise becomes "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Ok"}]},{"type":"text","value":" and an erroneous promise becomes "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Err"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A quick survey of our toolbox suggests Rust developers targeting WASM will use "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"std"}]},{"type":"text","value":" or custom executors for "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Future"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"JSPromise"}]},{"type":"text","value":" support. Existing code using async frameworks like "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tokio"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async-std"}]},{"type":"text","value":" will not immediately compile to WASM:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/rustwasm/wasm-bindgen/issues/146"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wasm-bindgen"}]}]},{"type":"text","value":" and "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/rust-lang/futures-rs/issues/60"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"futures"}]}]},{"type":"text","value":" can compile with "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"no_std"}]},{"type":"text","value":", but"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"tokio "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/tokio-rs/tokio/issues/1597"},"children":[{"type":"text","value":"doesn't support WASM"}]},{"type":"text","value":" "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/tokio-rs/mio/issues/21"},"children":[{"type":"text","value":"or "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"no_std"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"and neither does "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/async-rs/async-std/issues/220"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async-std"}]}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"id":"19a6ac54-902e-5db3-9f1b-665f907f6888","fileAbsolutePath":"/Users/beverly.boydston/dev/bever1337/modules/data/article/yet-another-js-call-stack-article.md","path":"/articles/yet-another-js-call-stack-article"}}},
    "staticQueryHashes": []}